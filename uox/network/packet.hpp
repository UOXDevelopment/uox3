//Copyright Â© 2022 Charles Kerr. All rights reserved.

#ifndef packet_hpp
#define packet_hpp

#include <cstdint>
#include <string>
#include <vector>
#include <algorithm>
#include <utility>
#include <unordered_map>

#include "bytebuffer.hpp"

/* **************************************************************************************
 uo packets and sizes
 ************************************************************************************** */

/* **************************************************************************************
 packet_t
 ************************************************************************************** */
//=========================================================
struct packet_t : public bytebuffer_t {
private:
	static const std::unordered_map<std::uint8_t,std::pair<int,std::string> > uopackets ;
	
	static constexpr std::array<std::array<std::uint32_t,2>,257> _huffman_table{{
		{0x02,0x000},{0x05,0x01f},{0x06,0x022},{0x07,0x034},{0x07,0x075},{0x06,0x028},
		{0x06,0x03b},{0x07,0x032},{0x08,0x0e0},{0x08,0x062},{0x07,0x056},{0x08,0x079},
		{0x09,0x19d},{0x08,0x097},{0x06,0x02a},{0x07,0x057},{0x08,0x071},{0x08,0x05b},
		{0x07,0x04f},{0x08,0x066},{0x08,0x07d},{0x09,0x191},{0x09,0x1ce},{0x07,0x03f},
		{0x09,0x090},{0x08,0x059},{0x08,0x07b},{0x08,0x091},{0x08,0x0c6},{0x06,0x02d},
		{0x09,0x186},{0x08,0x06f},{0x09,0x093},{0x0a,0x1cc},{0x08,0x05a},{0x0a,0x1ae},
		{0x0a,0x1c0},{0x09,0x148},{0x09,0x14a},{0x09,0x082},{0x0a,0x19f},{0x09,0x171},
		{0x09,0x120},{0x09,0x0e7},{0x0a,0x1f3},{0x09,0x14b},{0x09,0x100},{0x09,0x190},
		{0x06,0x013},{0x09,0x161},{0x09,0x125},{0x09,0x133},{0x09,0x195},{0x09,0x173},
		{0x09,0x1ca},{0x09,0x086},{0x09,0x1e9},{0x09,0x0db},{0x09,0x1ec},{0x09,0x08b},
		{0x09,0x085},{0x05,0x00a},{0x08,0x096},{0x08,0x09c},{0x09,0x1c3},{0x09,0x19c},
		{0x09,0x08f},{0x09,0x18f},{0x09,0x091},{0x09,0x087},{0x09,0x0c6},{0x09,0x177},
		{0x09,0x089},{0x09,0x0d6},{0x09,0x08c},{0x09,0x1ee},{0x09,0x1eb},{0x09,0x084},
		{0x09,0x164},{0x09,0x175},{0x09,0x1cd},{0x08,0x05e},{0x09,0x088},{0x09,0x12b},
		{0x09,0x172},{0x09,0x10a},{0x09,0x08d},{0x09,0x13a},{0x09,0x11c},{0x0a,0x1e1},
		{0x0a,0x1e0},{0x09,0x187},{0x0a,0x1dc},{0x0a,0x1df},{0x07,0x074},{0x09,0x19f},
		{0x08,0x08d},{0x08,0x0e4},{0x07,0x079},{0x09,0x0ea},{0x09,0x0e1},{0x08,0x040},
		{0x07,0x041},{0x09,0x10b},{0x09,0x0b0},{0x08,0x06a},{0x08,0x0c1},{0x07,0x071},
		{0x07,0x078},{0x08,0x0b1},{0x09,0x14c},{0x07,0x043},{0x08,0x076},{0x07,0x066},
		{0x07,0x04d},{0x09,0x08a},{0x06,0x02f},{0x08,0x0c9},{0x09,0x0ce},{0x09,0x149},
		{0x09,0x160},{0x0a,0x1ba},{0x0a,0x19e},{0x0a,0x39f},{0x09,0x0e5},{0x09,0x194},
		{0x09,0x184},{0x09,0x126},{0x07,0x030},{0x08,0x06c},{0x09,0x121},{0x09,0x1e8},
		{0x0a,0x1c1},{0x0a,0x11d},{0x0a,0x163},{0x0a,0x385},{0x0a,0x3db},{0x0a,0x17d},
		{0x0a,0x106},{0x0a,0x397},{0x0a,0x24e},{0x07,0x02e},{0x08,0x098},{0x0a,0x33c},
		{0x0a,0x32e},{0x0a,0x1e9},{0x09,0x0bf},{0x0a,0x3df},{0x0a,0x1dd},{0x0a,0x32d},
		{0x0a,0x2ed},{0x0a,0x30b},{0x0a,0x107},{0x0a,0x2e8},{0x0a,0x3de},{0x0a,0x125},
		{0x0a,0x1e8},{0x09,0x0e9},{0x0a,0x1cd},{0x0a,0x1b5},{0x09,0x165},{0x0a,0x232},
		{0x0a,0x2e1},{0x0b,0x3ae},{0x0b,0x3c6},{0x0b,0x3e2},{0x0a,0x205},{0x0a,0x29a},
		{0x0a,0x248},{0x0a,0x2cd},{0x0a,0x23b},{0x0b,0x3c5},{0x0a,0x251},{0x0a,0x2e9},
		{0x0a,0x252},{0x09,0x1ea},{0x0b,0x3a0},{0x0b,0x391},{0x0a,0x23c},{0x0b,0x392},
		{0x0b,0x3d5},{0x0a,0x233},{0x0a,0x2cc},{0x0b,0x390},{0x0a,0x1bb},{0x0b,0x3a1},
		{0x0b,0x3c4},{0x0a,0x211},{0x0a,0x203},{0x09,0x12a},{0x0a,0x231},{0x0b,0x3e0},
		{0x0a,0x29b},{0x0b,0x3d7},{0x0a,0x202},{0x0b,0x3ad},{0x0a,0x213},{0x0a,0x253},
		{0x0a,0x32c},{0x0a,0x23d},{0x0a,0x23f},{0x0a,0x32f},{0x0a,0x11c},{0x0a,0x384},
		{0x0a,0x31c},{0x0a,0x17c},{0x0a,0x30a},{0x0a,0x2e0},{0x0a,0x276},{0x0a,0x250},
		{0x0b,0x3e3},{0x0a,0x396},{0x0a,0x18f},{0x0a,0x204},{0x0a,0x206},{0x0a,0x230},
		{0x0a,0x265},{0x0a,0x212},{0x0a,0x23e},{0x0b,0x3ac},{0x0b,0x393},{0x0b,0x3e1},
		{0x0a,0x1de},{0x0b,0x3d6},{0x0a,0x31d},{0x0b,0x3e5},{0x0b,0x3e4},{0x0a,0x207},
		{0x0b,0x3c7},{0x0a,0x277},{0x0b,0x3d4},{0x08,0x0c0},{0x0a,0x162},{0x0a,0x3da},
		{0x0a,0x124},{0x0a,0x1b4},{0x0a,0x264},{0x0a,0x33d},{0x0a,0x1d1},{0x0a,0x1af},
		{0x0a,0x39e},{0x0a,0x24f},{0x0b,0x373},{0x0a,0x249},{0x0b,0x372},{0x09,0x167},
		{0x0a,0x210},{0x0a,0x23a},{0x0a,0x1b8},{0x0b,0x3af},{0x0a,0x18e},{0x0a,0x2ec},
		{0x07,0x062},{0x04,0x00d}}
	};
	
	auto pack(const std::vector<std::uint8_t> &data,std::vector<std::uint8_t> &result) const ->void ;
	
public:
	bool is_variable ;
	std::string name ;
	std::vector<std::uint8_t> packed_data ;
	
	packet_t();
	packet_t(int size,const std::string &name,bool variable = false );
	
	static auto packetInfo(std::uint8_t packetnum)  ->const std::pair<int,std::string>&;
	
	auto pack() ->packet_t& ;
	auto finalize() ->packet_t& ;
	auto id() const ->std::uint8_t ;
	
};
#endif /* packet_hpp */
